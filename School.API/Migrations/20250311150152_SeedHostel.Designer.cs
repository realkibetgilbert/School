// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.API.Data;

#nullable disable

namespace School.API.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20250311150152_SeedHostel")]
    partial class SeedHostel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("School.MODEL.AuthUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("School.MODEL.Hostel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hostels");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6101),
                            Description = "A boys hostel near the main block",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6121),
                            Name = "Alpha Hostel"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6140),
                            Description = "A girls hostel with modern facilities",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6146),
                            Name = "Beta Hostel"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6160),
                            Description = "A hostel for senior students",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6163),
                            Name = "Gamma Hostel"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6173),
                            Description = "A new hostel with high security",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6180),
                            Name = "Delta Hostel"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6193),
                            Description = "Spacious hostel with a gym facility",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6196),
                            Name = "Epsilon Hostel"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6202),
                            Description = "Affordable accommodation for students",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6208),
                            Name = "Zeta Hostel"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6217),
                            Description = "Premium hostel for postgraduate students",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6227),
                            Name = "Eta Hostel"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6233),
                            Description = "Hostel with attached cafeteria",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6236),
                            Name = "Theta Hostel"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6245),
                            Description = "Hostel with a large study hall",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6251),
                            Name = "Iota Hostel"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6263),
                            Description = "A quiet place for research students",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6266),
                            Name = "Kappa Hostel"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6272),
                            Description = "Hostel with a rooftop relaxation area",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6278),
                            Name = "Lambda Hostel"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6288),
                            Description = "Affordable hostel near the sports complex",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6297),
                            Name = "Mu Hostel"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6304),
                            Description = "Hostel with 24/7 medical assistance",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6306),
                            Name = "Nu Hostel"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6315),
                            Description = "An eco-friendly hostel with solar power",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6321),
                            Name = "Xi Hostel"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6333),
                            Description = "A centrally located hostel for all",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6336),
                            Name = "Omicron Hostel"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6342),
                            Description = "Hostel with a dedicated tech lab",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6345),
                            Name = "Pi Hostel"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6358),
                            Description = "A well-ventilated and green hostel",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6366),
                            Name = "Rho Hostel"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6373),
                            Description = "Hostel with extra co-curricular facilities",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6375),
                            Name = "Sigma Hostel"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6384),
                            Description = "Hostel with a library and digital lab",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6391),
                            Name = "Tau Hostel"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6403),
                            Description = "A newly built hostel with modern amenities",
                            ModifiedBy = "Admin",
                            ModifiedOn = new DateTime(2025, 3, 11, 15, 1, 50, 657, DateTimeKind.Utc).AddTicks(6406),
                            Name = "Upsilon Hostel"
                        });
                });

            modelBuilder.Entity("School.MODEL.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoin")
                        .HasColumnType("datetime2");

                    b.Property<long>("HostelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("School.MODEL.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("School.MODEL.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("School.MODEL.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.MODEL.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("School.MODEL.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("School.MODEL.Student", b =>
                {
                    b.HasOne("School.MODEL.Hostel", "Hostel")
                        .WithMany()
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hostel");
                });
#pragma warning restore 612, 618
        }
    }
}
